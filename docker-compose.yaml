version: '3.7'

# --------------- AIRFLOW ENVIRONMENT VARIABLES ---------------
x-environment: &airflow_environment
  - AIRFLOW__CORE__EXECUTOR=LocalExecutor
  - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql://airflow:airflow@airflowdb:5432/airflowdb
  - AIRFLOW__CORE__FERNET_KEY=YlCImzjge_TeZc7jPJ7Jz2pgOtb4yTssA1pVyqIADWg=
  - AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS=False
  - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
  - AIRFLOW__CORE__LOAD_EXAMPLES=False
  - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=True
  - AIRFLOW__CORE__DEFAULT_TIMEZONE=America/Bogota

x-airflow-image: &airflow_image apache/airflow:2.2.5

# ----------------- SERVICES ---------------------------------

services:
  # ----- airflow services -----
  airflowdb:
    image: postgres
    container_name: airflowdb
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflowdb
    ports:
      - "5432:5432"
    volumes:
      - potsgres-airflowdb-volume:/var/lib/postgresql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
  
  airflow_init:
    build:
      context: docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    container_name: airflow_init
    depends_on:
      - airflowdb
    environment: *airflow_environment
    entrypoint: /bin/bash
    command: -c 'airflow db init && airflow users create --username admin --password admin --firstname user --lastname test --role Admin --email admin@example.com'
      
  airflow_webserver:
    build: 
      context: docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    container_name: airflow_webserver
    depends_on:
      - airflowdb
      - airflow_init
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - logs:/opt/airflow/logs
    environment: *airflow_environment
    command: webserver
  
  airflow_scheduler:
    build: 
      context: docker
      args:
        AIRFLOW_BASE_IMAGE: *airflow_image
    container_name: airflow_scheduler
    restart: always
    depends_on:
      - airflowdb
      - airflow_init
    volumes:
      - logs:/opt/airflow/logs
      - ./dags:/opt/airflow/dags
    environment: *airflow_environment
    command: scheduler

volumes:
  potsgres-airflowdb-volume:
  logs:
